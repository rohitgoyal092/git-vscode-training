{"version":3,"sources":["hooks/useDebounceInputHanlding.tsx","constants/hooks/useDebounceInputHanlding.tsx","components/WaitingState.tsx","components/EmptyState.tsx","constants/hooks/useQuery.tsx","hooks/useQuery.tsx","components/Character.tsx","components/Film.tsx","constants/components/Film.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useDebounceInputHanlding","initialId","React","useState","input","setinput","isTyping","setIsTyping","handleInput","waitingValue","handleInputDebounce","func","timer","timeout","args","clearTimeout","setTimeout","apply","debounce","id","handleValueChange","inputValue","WaitingState","className","EmptyState","NETWORK_STATUS","IDLE","FETCHING","ERROR","ERROR_TYPES","fetch_retry","controller","url","n","signal","fetch","then","response","Promise","resolve","catch","error","aborted","reject","fetch_timeout","myTimeout","abort","Error","finally","useQuery","initialState","data","status","state","setState","useLayoutEffect","AbortController","isRunning","errorEncountered","prevState","ok","json","type","message","loading","Character","name","Film","filmId","map","characterUrl","preventEnterKeyReload","e","key","preventDefault","App","stateManager","inputControl","setInputControl","onKeyPress","placeholder","value","onChange","txt","currInput","currentTarget","length","match","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cab68c8.chunk.js","sourcesContent":["import React from \"react\";\nimport { DEBOUNCE_TIME_LIMIT } from \"../constants/hooks/useDebounceInputHanlding\";\n\nconst debounce = (func: Function, timeout = DEBOUNCE_TIME_LIMIT) => {\n  let timer: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args as []);\n    }, timeout);\n  };\n};\n\nexport interface DebounceInputHookType<IdType> {\n  id: IdType;\n  isTyping: boolean;\n  handleValueChange: (arg: IdType) => any;\n}\n\nexport const useDebounceInputHanlding = <InputType extends string | number>(\n  initialId: InputType\n): DebounceInputHookType<InputType> => {\n  const [input, setinput] = React.useState<InputType>(initialId);\n  const [isTyping, setIsTyping] = React.useState<boolean>(false);\n  const handleInput = React.useState(() => {\n    return (waitingValue: InputType) => {\n      setinput(() => waitingValue);\n      setIsTyping(() => false);\n    };\n  })[0];\n  const handleInputDebounce = React.useState(() => debounce(handleInput))[0];\n\n  const handleValueChange = React.useState(() => {\n    return (inputValue: InputType) => {\n      if (!inputValue) {\n        handleInput(inputValue);\n        return;\n      }\n      setIsTyping(() => true);\n      handleInputDebounce(inputValue);\n    };\n  })[0];\n\n  return {\n    id: input,\n    isTyping: isTyping,\n    handleValueChange: handleValueChange,\n  };\n};\n","export const DEBOUNCE_TIME_LIMIT: number = 500;\n","export const WaitingState = () => {\n  return <div className={`film no-border`}>{\"Receiving Input....\"}</div>;\n};\n","export const EmptyState = () => {\n  return <div className={`film no-border`}>{\"\"}</div>;\n};\n","export interface statusType {\n  __this_is_status_type: \"status_type\";\n}\nfunction makeStatusType(value: string): statusType {\n  return value as unknown as statusType;\n}\nexport const NETWORK_STATUS = {\n  IDLE: makeStatusType(\"idle\"),\n  FETCHING: makeStatusType(\"fetching\"),\n  ERROR: makeStatusType(\"error\"),\n};\n\nexport const ERROR_TYPES = {\n  URL_ERROR: \"url error\",\n  DATA_ERROR: \"data error\",\n  NETWORK_ERROR: \"network error\",\n};\n\nexport const RETRY_COUNT: number = 10;\nexport const TIMEOUT_LIMIT: number = 10000;\n","import React from \"react\";\n\nimport {\n  NETWORK_STATUS,\n  ERROR_TYPES,\n  RETRY_COUNT,\n  TIMEOUT_LIMIT,\n} from \"../constants/hooks/useQuery\";\nimport { statusType } from \"../constants/hooks/useQuery\";\n\nexport interface Error {\n  type: string;\n  message: string;\n}\n\nexport interface FetchProps {\n  url: string;\n  n: number;\n  controller: AbortController;\n}\n\nconst fetch_retry = ({\n  controller,\n  url,\n  n,\n  ...args\n}: FetchProps): Promise<Response | Error> => {\n  const signal: AbortSignal = controller.signal;\n  return fetch(url, { signal })\n    .then((response) => {\n      return Promise.resolve(response);\n    })\n    .catch(function (error) {\n      if (signal.aborted) {\n        return Promise.reject(error);\n      }\n      if (n === 1) {\n        return Promise.reject(error);\n      }\n      return fetch_retry({\n        url: url,\n        n: n - 1,\n        controller: controller,\n        ...args,\n      });\n    });\n};\n\nconst fetch_timeout = ({\n  url,\n  n,\n  controller,\n  ...args\n}: FetchProps): Promise<Response | Error> => {\n  return new Promise((resolve, reject) => {\n    let myTimeout = setTimeout(() => {\n      controller.abort();\n      reject(Error(\"Error Code : 408. Exceeded Timeout Limit!\"));\n    }, TIMEOUT_LIMIT);\n\n    fetch_retry({ controller: controller, url: url, n: n, ...args })\n      .then((response) => {\n        resolve(response);\n      })\n      .catch((error) => {\n        reject(error);\n      })\n      .finally(() => {\n        clearTimeout(myTimeout);\n      });\n  });\n};\n\nexport interface UseQueryStateType<DataType> {\n  data: DataType | null;\n  error: Error | null;\n  status: statusType;\n}\n\nexport interface UseQueryReturnType<DataType> {\n  data: DataType | null;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport const useQuery = <DataType,>({\n  url,\n  ...props\n}: {\n  url: string;\n}): UseQueryReturnType<DataType> => {\n  const initialState: UseQueryStateType<DataType> = {\n    data: null,\n    error: null,\n    status: NETWORK_STATUS.IDLE,\n  };\n\n  const [state, setState] = React.useState<UseQueryStateType<DataType>>({\n    ...initialState,\n  });\n\n  React.useLayoutEffect(() => {\n    const controller: AbortController = new AbortController();\n    let isRunning: boolean = true;\n    let errorEncountered: boolean = false;\n    if (url) {\n      setState((prevState: UseQueryStateType<DataType>) => ({\n        ...initialState,\n        status: NETWORK_STATUS.FETCHING,\n      }));\n      fetch_timeout({\n        url: url,\n        n: RETRY_COUNT,\n        controller: controller,\n      })\n        .then(\n          (response) => {\n            if (!isRunning) {\n              return;\n            }\n            if (!(response as Response).ok) {\n              errorEncountered = true;\n              setState(\n                (\n                  prevState: UseQueryStateType<DataType>\n                ): UseQueryStateType<DataType> => ({\n                  ...prevState,\n                  status: NETWORK_STATUS.ERROR,\n                  error: {\n                    type: ERROR_TYPES.URL_ERROR,\n                    message: `Error hitting the url : \"${url}\". ErrorCode ${\n                      (response as Response).status\n                    }`,\n                  },\n                })\n              );\n              return Promise.resolve();\n            }\n            return (response as Response).json();\n          },\n          (error: Error) => {\n            if (!isRunning) {\n              return;\n            }\n            errorEncountered = true;\n            setState(\n              (\n                prevState: UseQueryStateType<DataType>\n              ): UseQueryStateType<DataType> => ({\n                ...prevState,\n                status: NETWORK_STATUS.ERROR,\n                error: {\n                  type: ERROR_TYPES.NETWORK_ERROR,\n                  message: `Network Error : ${error.message}`,\n                },\n              })\n            );\n          }\n        )\n        .then((response: DataType) => {\n          if (isRunning) {\n            if (!errorEncountered) {\n              setState(\n                (prevState): UseQueryStateType<DataType> => ({\n                  ...prevState,\n                  data: response,\n                  status: NETWORK_STATUS.IDLE,\n                })\n              );\n            }\n          }\n        })\n        .catch((error: Error) => {\n          if (isRunning) {\n            setState(\n              (\n                prevState: UseQueryStateType<DataType>\n              ): UseQueryStateType<DataType> => ({\n                ...prevState,\n                status: NETWORK_STATUS.ERROR,\n                error: {\n                  type: ERROR_TYPES.DATA_ERROR,\n                  message: `Parsing Error : Could not understand what was returned : ${error.message}`,\n                },\n              })\n            );\n          }\n        });\n    }\n    return (): void => {\n      isRunning = false;\n      controller.abort();\n    };\n  }, [url]);\n  return {\n    data: state.data,\n    loading: state.status === NETWORK_STATUS.FETCHING,\n    error: state.status === NETWORK_STATUS.ERROR ? state.error : null,\n  };\n};\n","import { useQuery } from \"../hooks/useQuery\";\n\nexport const Character = ({ url, ...props }: { url: string }) => {\n  const { data, loading, error } = useQuery<{ name: string }>({ url: url });\n  if (error) {\n    return <div className={`character no-border`}>{error.message}</div>;\n  }\n  if (loading) {\n    return <div className={`character no-border`}>{`Retrieving...`}</div>;\n  }\n  if (!data) {\n    return <div className={`character no-border`}>{\"\"}</div>;\n  }\n  return <div className={`character`}>{data.name}</div>;\n};\n","import { useQuery } from \"../hooks/useQuery\";\nimport { BASE_FILM_URL } from \"../constants/components/Film\";\nimport { Character } from \"./Character\";\n\nexport const Film = ({ filmId, ...props }: { filmId: number }) => {\n  const { data, loading, error } = useQuery<{ characters: [string] }>({\n    url: `${BASE_FILM_URL}${filmId}`,\n  });\n  if (error) {\n    return <div className={`film no-border`}>{error.message}</div>;\n  }\n  if (loading) {\n    return <div className={`film no-border`}>{`Retrieving...`}</div>;\n  }\n  if (!data) {\n    return <div className={`film no-border`}>{\"\"}</div>;\n  }\n  return (\n    <ul className={`film`}>\n      {data[\"characters\"].map((characterUrl) => {\n        return <Character key={`${characterUrl}`} url={characterUrl} />;\n      })}\n    </ul>\n  );\n};\n","export const BASE_FILM_URL: string = \"https://swapi.dev/api/films/\";\n","import { DebounceInputHookType } from \"./hooks/useDebounceInputHanlding\";\nimport { useDebounceInputHanlding } from \"./hooks/useDebounceInputHanlding\";\nimport { WaitingState } from \"./components/WaitingState\";\nimport { EmptyState } from \"./components/EmptyState\";\nimport { Film } from \"./components/Film\";\nimport React, { useState } from \"react\";\n\nconst checkStringIsNumber = (txt: string): boolean => {\n  if (txt.length < 1) {\n    return true;\n  }\n  let validRegex = /^[0-9]+$/;\n  if (txt.match(validRegex)) {\n    return true;\n  }\n  return false;\n};\n\nconst preventEnterKeyReload = (e: React.KeyboardEvent) => {\n  if (e.key === \"Enter\") {\n    e.preventDefault();\n  }\n};\n\nconst App = () => {\n  const stateManager: DebounceInputHookType<number> = useDebounceInputHanlding(\n    0 as number\n  );\n  const filmId = stateManager.id;\n  const isTyping = stateManager.isTyping;\n  const handleValueChange = stateManager.handleValueChange;\n  const [inputControl, setInputControl] = useState<string>(\"\");\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    let currInput: string = e.currentTarget.value;\n    if (checkStringIsNumber(currInput)) {\n      setInputControl(() => currInput);\n      handleValueChange(parseInt(currInput, 10));\n    } else {\n      handleValueChange(parseInt(inputControl, 10));\n    }\n  };\n\n  return (\n    <div className='app'>\n      <form className='app-form' onKeyPress={preventEnterKeyReload}>\n        <input\n          className='app-input'\n          placeholder='Please input film id (Number : 1 to 6)'\n          value={inputControl}\n          onChange={handleChange}\n        />\n      </form>\n      {isTyping ? (\n        <WaitingState />\n      ) : filmId ? (\n        <Film filmId={filmId} />\n      ) : (\n        <EmptyState />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}